{"ast":null,"code":"var _jsxFileName = \"/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/PollResults.tsx\",\n    _s = $RefreshSig$();\n\nimport { collection, onSnapshot } from \"firebase/firestore\";\nimport { Pie } from 'react-chartjs-2';\nimport db from \"../../firebase/firestore\";\nimport React, { useEffect, useState } from \"react\";\nimport './PollResults.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PollResults(_ref) {\n  _s();\n\n  let {\n    pollID\n  } = _ref;\n  let [title, setTitle] = useState('');\n  let [votePercentageACalc, setVotePercentageACalc] = useState(0);\n  let [votePercentageBCalc, setVotePercentageBCalc] = useState(0);\n  let [votePercentageCCalc, setVotePercentageCCalc] = useState(0);\n  let [votePercentageDCalc, setVotePercentageDCalc] = useState(0);\n  let [options, setOptions] = useState(['']);\n  let [results, setResults] = useState([{}]);\n  let [isLoading, setLoadingStatus] = useState(true);\n  useEffect(() => {\n    onSnapshot(collection(db, 'polls'), snapshot => {\n      snapshot.docs.map(doc => {\n        if (doc.id === pollID) {\n          const data = doc.data();\n          let totalVotes = data.optionACount + data.optionBCount + data.optionCCount + data.optionDCount;\n          setVotePercentageACalc(Math.round(data.optionACount / totalVotes * 100));\n          setVotePercentageBCalc(Math.round(data.optionBCount / totalVotes * 100));\n          setVotePercentageCCalc(Math.round(data.optionCCount / totalVotes * 100));\n          setVotePercentageDCalc(Math.round(data.optionDCount / totalVotes * 100));\n          setTitle(data.title);\n          setOptions(data.options);\n          const calcData = [{\n            title: `${options[0]}`,\n            value: Math.round(votePercentageACalc),\n            color: '#E38627'\n          }, {\n            title: `${options[1]}`,\n            value: Math.round(votePercentageBCalc),\n            color: '#C13C37'\n          }, {\n            title: `${options[2]}`,\n            value: Math.round(votePercentageCCalc),\n            color: '#6A2135'\n          }, {\n            title: `${options[3]}`,\n            value: Math.round(votePercentageDCalc),\n            color: '#873e23'\n          }];\n          setResults(calcData);\n          setTimeout(() => {\n            setLoadingStatus(false);\n          }, 1200);\n        }\n      });\n    });\n  }, [results]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Pie, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PollResults, \"PaQbZSKmuFJbA7x416LJ+9MLBiQ=\");\n\n_c = PollResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollResults\");","map":{"version":3,"sources":["/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/PollResults.tsx"],"names":["collection","onSnapshot","Pie","db","React","useEffect","useState","PollResults","pollID","title","setTitle","votePercentageACalc","setVotePercentageACalc","votePercentageBCalc","setVotePercentageBCalc","votePercentageCCalc","setVotePercentageCCalc","votePercentageDCalc","setVotePercentageDCalc","options","setOptions","results","setResults","isLoading","setLoadingStatus","snapshot","docs","map","doc","id","data","totalVotes","optionACount","optionBCount","optionCCount","optionDCount","Math","round","calcData","value","color","setTimeout"],"mappings":"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","sourcesContent":["import { collection, onSnapshot } from \"firebase/firestore\";\nimport { Pie } from 'react-chartjs-2';\nimport db from \"../../firebase/firestore\";\nimport React, { useEffect, useState } from \"react\";\nimport './PollResults.css';\n\n\n\n\n\nexport default function PollResults({ pollID }) {\n\n    let [title, setTitle] = useState('');\n    let [votePercentageACalc, setVotePercentageACalc] = useState(0);\n    let [votePercentageBCalc, setVotePercentageBCalc] = useState(0);\n    let [votePercentageCCalc, setVotePercentageCCalc] = useState(0);\n    let [votePercentageDCalc, setVotePercentageDCalc] = useState(0);\n    let [options, setOptions] = useState(['']);\n    let [results, setResults] = useState([{}]);\n    let [isLoading, setLoadingStatus] = useState(true);\n\n\n    useEffect(() => {\n        onSnapshot(collection(db, 'polls'), (snapshot) => {\n            snapshot.docs.map((doc) => {\n                if(doc.id === pollID) {\n                    const data = doc.data();\n                    let totalVotes = data.optionACount + data.optionBCount + data.optionCCount + data.optionDCount;\n                    setVotePercentageACalc(Math.round(data.optionACount / totalVotes * 100));\n                    setVotePercentageBCalc(Math.round(data.optionBCount / totalVotes * 100));\n                    setVotePercentageCCalc(Math.round(data.optionCCount / totalVotes * 100));\n                    setVotePercentageDCalc(Math.round(data.optionDCount / totalVotes * 100));\n                    setTitle(data.title);\n                    setOptions(data.options);\n                    const calcData = [\n                        {title: `${options[0]}`, value: Math.round(votePercentageACalc), color: '#E38627'},\n                        {title: `${options[1]}`, value: Math.round(votePercentageBCalc), color: '#C13C37'},\n                        {title: `${options[2]}`, value: Math.round(votePercentageCCalc), color: '#6A2135'},\n                        {title: `${options[3]}`, value: Math.round(votePercentageDCalc), color: '#873e23'},\n                    ];\n                    setResults(calcData);\n                    setTimeout(() => { setLoadingStatus(false); }, 1200);\n                }\n            })\n        })\n    }, [results]);\n\n\n    \n    return (\n        <div>\n            {!isLoading ? (\n                <div>\n                    <h1>{title}</h1>\n                    <Pie />\n                </div>\n            ) : (\n                <h1>Loading!</h1>\n            )}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}