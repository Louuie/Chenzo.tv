[{"C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\index.tsx":"1","C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\reportWebVitals.ts":"2","C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\App.tsx":"3","C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\firebase\\firestore.js":"4","C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\components\\Poll\\CreatePoll.tsx":"5","C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\components\\Poll\\Poll.tsx":"6","C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\components\\Poll\\PollResults.tsx":"7"},{"size":593,"mtime":1646545326256,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1646507707539,"results":"10","hashOfConfig":"9"},{"size":414,"mtime":1646550642034,"results":"11","hashOfConfig":"9"},{"size":351,"mtime":1646536818517,"results":"12","hashOfConfig":"9"},{"size":2260,"mtime":1646550451258,"results":"13","hashOfConfig":"9"},{"size":4279,"mtime":1646634183252,"results":"14","hashOfConfig":"9"},{"size":3069,"mtime":1646641020783,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"16vz0gu",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"19"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\index.tsx",[],[],["43","44"],"C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\App.tsx",["45"],[],"import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport CreatePoll from './components/Poll/CreatePoll';\nimport Poll from './components/Poll/Poll';\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path='/poll/create' element={<CreatePoll />}/><Route path='/poll/:id' element={<Poll />}/>\n    </Routes>\n  );\n}\n\nexport default App;\n","C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\firebase\\firestore.js",["46"],[],"import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp({\r\n  apiKey: 'AIzaSyCkiL_ZyjBEiY6NfD7ihk20nBP-PePkjXU',\r\n  authDomain: 'chenzotv-e811a.firebaseapp.com',\r\n  projectId: 'chenzotv-e811a'\r\n});\r\n\r\nconst db = getFirestore();\r\n\r\nexport default db;",["47","48"],"C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\components\\Poll\\CreatePoll.tsx",["49","50","51"],[],"import React, { useState } from \"react\";\r\nimport { collection, addDoc, setDoc, doc } from \"firebase/firestore\";\r\nimport db from \"../../firebase/firestore\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport Poll from \"./Poll\";\r\n\r\n\r\nexport default function CreatePoll() {\r\n\r\n    let [pollCreated, isPollCreated] = useState(false);\r\n    let [pollID, setPollID] = useState('');\r\n\r\n    const onPollCreation = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            let options = [\r\n                e.target[1].value,\r\n                e.target[2].value,\r\n                e.target[3].value,\r\n                e.target[4].value,\r\n            ]\r\n\r\n            const pollRef = await addDoc(collection(db, 'polls'), {\r\n                title: e.target[0].value,\r\n                options: options,\r\n                optionACount: 0,\r\n                optionBCount: 0,\r\n                optionCCount: 0,\r\n                optionDCount: 0\r\n            });\r\n            isPollCreated(true);\r\n            setPollID(pollRef.id);\r\n            console.log(`Poll ID: ${pollRef.id} has been created!`)\r\n        } catch (e) { console.log(\"Error adding document: \", e) }\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {pollCreated ? (\r\n                <NavLink to={`/poll/${pollID}`} children={<Poll/>}/>\r\n            ) : (\r\n            <div>\r\n                <form onSubmit={onPollCreation}>\r\n                    <label id={\"title\"}>Title</label><br></br>\r\n                    <input type=\"text\" name=\"title\"></input><br></br>\r\n                    <label id={\"option1\"}>Option 1</label><br></br>\r\n                    <input type=\"text\" name=\"option1\"></input><br></br>\r\n                    <label id={\"option2\"}>Option 2</label><br></br>\r\n                    <input type=\"text\" name=\"option2\"></input><br></br>\r\n                    <label id={\"option3\"}>Option 3</label><br></br>\r\n                    <input type=\"text\" name=\"option3\"></input><br></br>\r\n                    <label id={\"option4\"}>Option 4</label><br></br>\r\n                    <input type=\"text\" name=\"option4\"></input><br></br>\r\n                    <input type=\"submit\" value=\"Submit\"></input><br></br>\r\n                </form>\r\n            </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\components\\Poll\\Poll.tsx",["52","53","54","55","56","57"],[],"import react, { Suspense, useEffect, useState, } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { collection, doc, getDoc, getDocs, onSnapshot, setDoc, updateDoc } from \"firebase/firestore\";\r\nimport db from \"../../firebase/firestore\";\r\nimport PollResults from \"./PollResults\";\r\n\r\nexport default function Poll() {\r\n    \r\n    let params = useParams();\r\n    let [title, setTitle] = useState('');\r\n    let [votingStatus, setVotingStatus] = useState(false);\r\n    let [pollingID, setPollingID] = useState('');\r\n    let [options, setOptions] = useState([]);\r\n    let [optionOneCount, setOptionOneCount] = useState(0);\r\n    let [optionTwoCount, setOptionTwoCount] = useState(0);\r\n    let [optionThreeCount, setOptionThreeCount] = useState(0);\r\n    let [optionFourCount, setOptionFourCount] = useState(0);\r\n\r\n    const onOption1 = async () => {\r\n        try {\r\n            let pollRef = doc(db, 'polls', pollingID);\r\n            await updateDoc(pollRef, {\r\n                optionACount: optionOneCount + 1\r\n            })\r\n            setVotingStatus(true);\r\n            console.log(`Successfully updated ${pollRef.id}`);\r\n        } catch(e) { console.log(e); }\r\n    };\r\n\r\n    \r\n    const onOption2 = async () => {\r\n        try {\r\n            let pollRef = doc(db, 'polls', pollingID);\r\n            await updateDoc(pollRef, {\r\n                optionBCount: optionTwoCount + 1\r\n            })\r\n            setVotingStatus(true);\r\n            console.log(`Successfully updated ${pollRef.id}`);\r\n        } catch(e) { console.log(e); }\r\n    };\r\n\r\n    \r\n    const onOption3 = async () => {\r\n        try {\r\n            let pollRef = doc(db, 'polls', pollingID);\r\n            await updateDoc(pollRef, {\r\n                optionCCount: optionThreeCount + 1\r\n            })\r\n            setVotingStatus(true);\r\n            console.log(`Successfully updated ${pollRef.id}`);\r\n        } catch(e) { console.log(e); }\r\n    };\r\n\r\n    \r\n    const onOption4 = async () => {\r\n        try {\r\n            let pollRef = doc(db, 'polls', pollingID);\r\n            await updateDoc(pollRef, {\r\n                optionDCount: optionFourCount + 1\r\n            })\r\n            setVotingStatus(true);\r\n            console.log(`Successfully updated ${pollRef.id}`);\r\n        } catch(e) { console.log(e); }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // let totalVotes = optionOneCount + optionTwoCount + optionThreeCount + optionFourCount;\r\n        // let votePercentageA = optionOneCount / totalVotes * 100;\r\n        // let votePercentageB = optionTwoCount / totalVotes * 100;\r\n        // let votePercentageC = optionThreeCount / totalVotes * 100;\r\n        // let votePercentageD = optionFourCount / totalVotes * 100;\r\n        // console.log(`${votePercentageA}% voted for Chenzo`);\r\n        // console.log(`${votePercentageB}% voted for Marky`);\r\n        // console.log(`${votePercentageC}% voted for Flax`);\r\n        // console.log(`${votePercentageD}% voted for Ally`);\r\n\r\n        onSnapshot(collection(db, \"polls\"), (snapshot) => {\r\n            snapshot.docs.map(doc => {\r\n                if(doc.id === params.id) {\r\n                    const data = doc.data();\r\n                    setTitle(data.title);\r\n                    setOptions(data.options);\r\n                    setPollingID(doc.id);\r\n                    setOptionOneCount(data.optionACount);\r\n                    setOptionTwoCount(data.optionBCount);\r\n                    setOptionThreeCount(data.optionCCount);\r\n                    setOptionFourCount(data.optionDCount);\r\n                }\r\n            });\r\n        });\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <Suspense fallback={<div></div>}>\r\n            <div>\r\n                {!votingStatus ? (\r\n                    <div>\r\n                        <h1>{title}</h1>\r\n                        <button onClick={onOption1}>{options[0]}</button><br></br>\r\n                        <button onClick={onOption2}>{options[1]}</button><br></br>\r\n                        <button onClick={onOption3}>{options[2]}</button><br></br>\r\n                        <button onClick={onOption4}>{options[3]}</button><br></br>\r\n                    </div>\r\n                ) : (\r\n                    <PollResults pollID={pollingID} />\r\n                )}\r\n            </div>\r\n        </Suspense>\r\n    )\r\n}","C:\\Users\\Elias\\Documents\\Programming\\Chenzo.tv\\frontend\\chenzo.tv\\src\\components\\Poll\\PollResults.tsx",["58","59"],[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":3,"column":8,"nodeType":"66","messageId":"67","endLine":3,"endColumn":12},{"ruleId":"68","severity":1,"message":"69","line":5,"column":7,"nodeType":"66","messageId":"67","endLine":5,"endColumn":18},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"70","line":2,"column":30,"nodeType":"66","messageId":"67","endLine":2,"endColumn":36},{"ruleId":"64","severity":1,"message":"71","line":2,"column":38,"nodeType":"66","messageId":"67","endLine":2,"endColumn":41},{"ruleId":"64","severity":1,"message":"72","line":4,"column":10,"nodeType":"66","messageId":"67","endLine":4,"endColumn":14},{"ruleId":"64","severity":1,"message":"73","line":1,"column":8,"nodeType":"66","messageId":"67","endLine":1,"endColumn":13},{"ruleId":"64","severity":1,"message":"74","line":3,"column":27,"nodeType":"66","messageId":"67","endLine":3,"endColumn":33},{"ruleId":"64","severity":1,"message":"75","line":3,"column":35,"nodeType":"66","messageId":"67","endLine":3,"endColumn":42},{"ruleId":"64","severity":1,"message":"70","line":3,"column":56,"nodeType":"66","messageId":"67","endLine":3,"endColumn":62},{"ruleId":"76","severity":1,"message":"77","line":78,"column":35,"nodeType":"78","messageId":"79","endLine":78,"endColumn":37},{"ruleId":"80","severity":1,"message":"81","line":91,"column":8,"nodeType":"82","endLine":91,"endColumn":10,"suggestions":"83"},{"ruleId":"76","severity":1,"message":"77","line":25,"column":37,"nodeType":"78","messageId":"79","endLine":25,"endColumn":39},{"ruleId":"80","severity":1,"message":"84","line":46,"column":8,"nodeType":"82","endLine":46,"endColumn":17,"suggestions":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-unused-vars","'firebaseApp' is assigned a value but never used.","'setDoc' is defined but never used.","'doc' is defined but never used.","'Link' is defined but never used.","'react' is defined but never used.","'getDoc' is defined but never used.","'getDocs' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["88"],"React Hook useEffect has missing dependencies: 'options', 'pollID', 'votePercentageACalc', 'votePercentageBCalc', 'votePercentageCCalc', and 'votePercentageDCalc'. Either include them or remove the dependency array.",["89"],"no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [params.id]",{"range":"94","text":"95"},"Update the dependencies array to be: [options, pollID, results, votePercentageACalc, votePercentageBCalc, votePercentageCCalc, votePercentageDCalc]",{"range":"96","text":"97"},[3576,3578],"[params.id]",[2258,2267],"[options, pollID, results, votePercentageACalc, votePercentageBCalc, votePercentageCCalc, votePercentageDCalc]"]