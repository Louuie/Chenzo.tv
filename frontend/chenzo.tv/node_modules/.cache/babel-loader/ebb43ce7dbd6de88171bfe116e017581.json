{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elias\\\\Documents\\\\Programming\\\\Chenzo.tv\\\\frontend\\\\chenzo.tv\\\\src\\\\components\\\\Poll\\\\Poll.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { collection, doc, getDoc } from \"firebase/firestore\";\nimport db from \"../../firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Poll() {\n  _s();\n\n  let params = useParams();\n  let [title, setTitle] = useState('');\n  let [optionA, setOptionA] = useState('');\n  let [optionB, setoptionB] = useState('');\n  let [optionC, setoptionC] = useState('');\n  let [optionD, setoptionD] = useState('');\n  let [optionOneCount, setOptionOneCount] = useState(0);\n  let [optionTwoCount, setOptionTwoCount] = useState(0);\n  let [optionThreeCount, setOptionThreeCount] = useState(0);\n  let [optionFourCount, setOptionFourCount] = useState(0);\n\n  const onVote = async () => {\n    try {} catch (e) {\n      console.log(\"Error adding document: \", e);\n    }\n  };\n\n  useEffect(() => {\n    // let totalVotes = optionOneCount + optionTwoCount + optionThreeCount + optionFourCount;\n    // let votePercentageA = optionOneCount / totalVotes * 100;\n    // let votePercentageB = optionTwoCount / totalVotes * 100;\n    // let votePercentageC = optionThreeCount / totalVotes * 100;\n    // let votePercentageD = optionFourCount / totalVotes * 100;\n    // console.log(`${votePercentageA}% voted for Chenzo`);\n    // console.log(`${votePercentageB}% voted for Marky`);\n    // console.log(`${votePercentageC}% voted for Flax`);\n    // console.log(`${votePercentageD}% voted for Ally`);\n    const getPollData = async () => {\n      const getPollsRef = collection(db, 'polls');\n      const pollDoc = await getDoc(doc(getPollsRef, params.pollID));\n\n      if (getPollsRef.id == params.pollID) {\n        console.log(pollDoc.data);\n      } else console.log(getPollsRef.id);\n    };\n\n    getPollData();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onVote,\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 48\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onVote,\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 48\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onVote,\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 48\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onVote,\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 48\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Poll, \"1J+YCF3yQYCkg8Lff/ckHH5rRio=\", false, function () {\n  return [useParams];\n});\n\n_c = Poll;\n\nvar _c;\n\n$RefreshReg$(_c, \"Poll\");","map":{"version":3,"sources":["C:/Users/Elias/Documents/Programming/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/Poll.tsx"],"names":["useEffect","useState","useParams","collection","doc","getDoc","db","Poll","params","title","setTitle","optionA","setOptionA","optionB","setoptionB","optionC","setoptionC","optionD","setoptionD","optionOneCount","setOptionOneCount","optionTwoCount","setOptionTwoCount","optionThreeCount","setOptionThreeCount","optionFourCount","setOptionFourCount","onVote","e","console","log","getPollData","getPollsRef","pollDoc","pollID","id","data"],"mappings":";;;AAAA,SAAgBA,SAAhB,EAA2BC,QAA3B,QAA4C,OAA5C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,MAA1B,QAA4D,oBAA5D;AACA,OAAOC,EAAP,MAAe,0BAAf;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAE3B,MAAIC,MAAM,GAAGN,SAAS,EAAtB;AACA,MAAI,CAACO,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAI,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAApC;AACA,MAAI,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAApC;AACA,MAAI,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,EAAD,CAApC;AACA,MAAI,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,EAAD,CAApC;AACA,MAAI,CAACkB,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAAC,CAAD,CAAlD;AACA,MAAI,CAACoB,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAC,CAAD,CAAlD;AACA,MAAI,CAACsB,gBAAD,EAAmBC,mBAAnB,IAA0CvB,QAAQ,CAAC,CAAD,CAAtD;AACA,MAAI,CAACwB,eAAD,EAAkBC,kBAAlB,IAAwCzB,QAAQ,CAAC,CAAD,CAApD;;AAEA,QAAM0B,MAAM,GAAG,YAAY;AACvB,QAAI,CACH,CADD,CACE,OAAOC,CAAP,EAAU;AAAEC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,CAAvC;AAA2C;AAC5D,GAHD;;AAKA5B,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UAAM+B,WAAW,GAAG,YAAY;AAC7B,YAAMC,WAAW,GAAG7B,UAAU,CAACG,EAAD,EAAK,OAAL,CAA9B;AACA,YAAM2B,OAAO,GAAG,MAAM5B,MAAM,CAACD,GAAG,CAAC4B,WAAD,EAAcxB,MAAM,CAAC0B,MAArB,CAAJ,CAA5B;;AACA,UAAGF,WAAW,CAACG,EAAZ,IAAkB3B,MAAM,CAAC0B,MAA5B,EAAoC;AAC/BL,QAAAA,OAAO,CAACC,GAAR,CAAYG,OAAO,CAACG,IAApB;AACJ,OAFD,MAEOP,OAAO,CAACC,GAAR,CAAYE,WAAW,CAACG,EAAxB;AACT,KAND;;AAOAJ,IAAAA,WAAW;AACd,GAnBQ,CAAT;AAqBA,sBACI;AAAA,4BACI;AAAA,gBAAKtB;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAEkB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAEuC;AAAA;AAAA;AAAA;AAAA,YAFvC,eAGI;AAAQ,MAAA,OAAO,EAAEA,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAGuC;AAAA;AAAA;AAAA;AAAA,YAHvC,eAII;AAAQ,MAAA,OAAO,EAAEA,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAIuC;AAAA;AAAA;AAAA;AAAA,YAJvC,eAKI;AAAQ,MAAA,OAAO,EAAEA,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAKuC;AAAA;AAAA;AAAA;AAAA,YALvC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GAhDuBpB,I;UAEPL,S;;;KAFOK,I","sourcesContent":["import react, { useEffect, useState, } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { collection, doc, getDoc, getDocs, updateDoc } from \"firebase/firestore\";\r\nimport db from \"../../firebase/firestore\";\r\n\r\nexport default function Poll() {\r\n    \r\n    let params = useParams();\r\n    let [title, setTitle] = useState('');\r\n    let [optionA, setOptionA] = useState('');\r\n    let [optionB, setoptionB] = useState('');\r\n    let [optionC, setoptionC] = useState('');\r\n    let [optionD, setoptionD] = useState('');\r\n    let [optionOneCount, setOptionOneCount] = useState(0);\r\n    let [optionTwoCount, setOptionTwoCount] = useState(0);\r\n    let [optionThreeCount, setOptionThreeCount] = useState(0);\r\n    let [optionFourCount, setOptionFourCount] = useState(0);\r\n\r\n    const onVote = async () => {\r\n        try {\r\n        } catch (e) { console.log(\"Error adding document: \", e) }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // let totalVotes = optionOneCount + optionTwoCount + optionThreeCount + optionFourCount;\r\n        // let votePercentageA = optionOneCount / totalVotes * 100;\r\n        // let votePercentageB = optionTwoCount / totalVotes * 100;\r\n        // let votePercentageC = optionThreeCount / totalVotes * 100;\r\n        // let votePercentageD = optionFourCount / totalVotes * 100;\r\n        // console.log(`${votePercentageA}% voted for Chenzo`);\r\n        // console.log(`${votePercentageB}% voted for Marky`);\r\n        // console.log(`${votePercentageC}% voted for Flax`);\r\n        // console.log(`${votePercentageD}% voted for Ally`);\r\n\r\n        const getPollData = async () => {\r\n           const getPollsRef = collection(db, 'polls');\r\n           const pollDoc = await getDoc(doc(getPollsRef, params.pollID))\r\n           if(getPollsRef.id == params.pollID) {\r\n                console.log(pollDoc.data);\r\n           } else console.log(getPollsRef.id);\r\n        };\r\n        getPollData();\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h1>{title}</h1>\r\n            <button onClick={onVote}>1</button><br></br>\r\n            <button onClick={onVote}>1</button><br></br>\r\n            <button onClick={onVote}>1</button><br></br>\r\n            <button onClick={onVote}>1</button><br></br>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}