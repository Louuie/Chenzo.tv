{"ast":null,"code":"var _jsxFileName = \"/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/Poll.tsx\",\n    _s = $RefreshSig$();\n\nimport { Suspense, useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { NavLink, useParams } from \"react-router-dom\";\nimport { collection, doc, getDoc, onSnapshot, arrayUnion, updateDoc } from \"firebase/firestore\";\nimport db from \"../../firebase/firestore\";\nimport PollResults from \"./PollResults\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Poll() {\n  _s();\n\n  let params = useParams();\n  let [ipAddress, setIPAddress] = useState('');\n  let [docStatus, setDocStatus] = useState(true);\n  let [title, setTitle] = useState('');\n  let [votingStatus, setVotingStatus] = useState(false);\n  let [pollingID, setPollingID] = useState('');\n  let [options, setOptions] = useState([]);\n  let [optionOneCount, setOptionOneCount] = useState(0);\n  let [optionTwoCount, setOptionTwoCount] = useState(0);\n  let [optionThreeCount, setOptionThreeCount] = useState(0);\n  let [optionFourCount, setOptionFourCount] = useState(0);\n\n  const onOption1 = async () => {\n    try {\n      let pollRef = doc(db, 'polls', pollingID);\n      await updateDoc(pollRef, {\n        optionACount: optionOneCount + 1,\n        IPAddresses: arrayUnion(ipAddress)\n      });\n      setVotingStatus(true);\n      console.log(`Successfully updated ${pollRef.id}`);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onOption2 = async () => {\n    try {\n      let pollRef = doc(db, 'polls', pollingID);\n      await updateDoc(pollRef, {\n        optionBCount: optionTwoCount + 1,\n        IPAddresses: arrayUnion(ipAddress)\n      });\n      setVotingStatus(true);\n      console.log(`Successfully updated ${pollRef.id}`);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onOption3 = async () => {\n    try {\n      let pollRef = doc(db, 'polls', pollingID);\n      await updateDoc(pollRef, {\n        optionCCount: optionThreeCount + 1,\n        IPAddresses: arrayUnion(ipAddress)\n      });\n      setVotingStatus(true);\n      console.log(`Successfully updated ${pollRef.id}`);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onOption4 = async () => {\n    try {\n      let pollRef = doc(db, 'polls', pollingID);\n      await updateDoc(pollRef, {\n        optionDCount: optionFourCount + 1,\n        IPAddresses: arrayUnion(ipAddress)\n      });\n      setVotingStatus(true);\n      console.log(`Successfully updated ${pollRef.id}`);\n    } catch (e) {\n      console.log(e);\n    }\n  }; // get user IP Address useEffect Hook\n\n\n  useEffect(() => {\n    axios.get('http://ip-api.com/json/?fields=61439').then(res => setIPAddress(res.data.query)).catch(err => console.log(err));\n  }, []);\n  useEffect(() => {\n    const firestoreInsert = async () => {\n      const checkRef = doc(db, 'polls', `${params.id}`);\n      const checkSnap = await getDoc(checkRef);\n\n      if (checkSnap.exists()) {\n        onSnapshot(collection(db, \"polls\"), snapshot => {\n          snapshot.docs.map(doc => {\n            console.log(doc.exists());\n\n            if (doc.id === params.id) {\n              const data = doc.data();\n              const IPAdresses = data.IPAddresses;\n              console.log(IPAdresses);\n\n              if (IPAdresses.includes(ipAddress)) {\n                setVotingStatus(true);\n              } else console.log('Hasnt voted!');\n\n              setTitle(data.title);\n              setOptions(data.options);\n              setPollingID(doc.id);\n              setOptionOneCount(data.optionACount);\n              setOptionTwoCount(data.optionBCount);\n              setOptionThreeCount(data.optionCCount);\n              setOptionFourCount(data.optionDCount);\n            }\n          });\n        });\n      } else setDocStatus(false);\n    };\n\n    firestoreInsert();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: docStatus ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !votingStatus ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onOption1,\n            children: options[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 90\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onOption2,\n            children: options[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 90\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onOption3,\n            children: options[2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 90\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onOption4,\n            children: options[3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 90\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(NavLink, {\n          to: `/poll/results/${pollingID}`,\n          children: /*#__PURE__*/_jsxDEV(PollResults, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 94\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 33\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"This document does not exist!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Poll, \"6nk9iX3FekGypwmZmA5CyHPPDak=\", false, function () {\n  return [useParams];\n});\n\n_c = Poll;\n\nvar _c;\n\n$RefreshReg$(_c, \"Poll\");","map":{"version":3,"sources":["/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/Poll.tsx"],"names":["Suspense","useEffect","useState","axios","NavLink","useParams","collection","doc","getDoc","onSnapshot","arrayUnion","updateDoc","db","PollResults","Poll","params","ipAddress","setIPAddress","docStatus","setDocStatus","title","setTitle","votingStatus","setVotingStatus","pollingID","setPollingID","options","setOptions","optionOneCount","setOptionOneCount","optionTwoCount","setOptionTwoCount","optionThreeCount","setOptionThreeCount","optionFourCount","setOptionFourCount","onOption1","pollRef","optionACount","IPAddresses","console","log","id","e","onOption2","optionBCount","onOption3","optionCCount","onOption4","optionDCount","get","then","res","data","query","catch","err","firestoreInsert","checkRef","checkSnap","exists","snapshot","docs","map","IPAdresses","includes"],"mappings":"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","sourcesContent":["import react, { Suspense, useEffect, useState, } from \"react\";\nimport axios from 'axios';\nimport { NavLink, useParams } from \"react-router-dom\";\nimport { collection, doc, getDoc, onSnapshot, arrayUnion, updateDoc } from \"firebase/firestore\";\nimport db from \"../../firebase/firestore\";\nimport PollResults from \"./PollResults\";\n\nexport default function Poll() {\n    let params = useParams();\n    let [ipAddress, setIPAddress] = useState('');\n    let [docStatus, setDocStatus] = useState(true);\n    let [title, setTitle] = useState('');\n    let [votingStatus, setVotingStatus] = useState(false);\n    let [pollingID, setPollingID] = useState('');\n    let [options, setOptions] = useState([]);\n    let [optionOneCount, setOptionOneCount] = useState(0);\n    let [optionTwoCount, setOptionTwoCount] = useState(0);\n    let [optionThreeCount, setOptionThreeCount] = useState(0);\n    let [optionFourCount, setOptionFourCount] = useState(0);\n\n    const onOption1 = async () => {\n        try {\n            let pollRef = doc(db, 'polls', pollingID);\n            await updateDoc(pollRef, {\n                optionACount: optionOneCount + 1,\n                IPAddresses: arrayUnion(ipAddress)\n            })\n            setVotingStatus(true);\n            console.log(`Successfully updated ${pollRef.id}`);\n        } catch(e) { console.log(e); }\n    };\n\n    \n    const onOption2 = async () => {\n        try {\n            let pollRef = doc(db, 'polls', pollingID);\n            await updateDoc(pollRef, {\n                optionBCount: optionTwoCount + 1,\n                IPAddresses: arrayUnion(ipAddress)\n            })\n            setVotingStatus(true);\n            console.log(`Successfully updated ${pollRef.id}`);\n        } catch(e) { console.log(e); }\n    };\n\n    \n    const onOption3 = async () => {\n        try {\n            let pollRef = doc(db, 'polls', pollingID);\n            await updateDoc(pollRef, {\n                optionCCount: optionThreeCount + 1,\n                IPAddresses: arrayUnion(ipAddress)\n            })\n            setVotingStatus(true);\n            console.log(`Successfully updated ${pollRef.id}`);\n        } catch(e) { console.log(e); }\n    };\n\n    \n    const onOption4 = async () => {\n        try {\n            let pollRef = doc(db, 'polls', pollingID);\n            await updateDoc(pollRef, {\n                optionDCount: optionFourCount + 1,\n                IPAddresses: arrayUnion(ipAddress)\n            })\n            setVotingStatus(true);\n            console.log(`Successfully updated ${pollRef.id}`);\n        } catch(e) { console.log(e); }\n    };\n\n    // get user IP Address useEffect Hook\n    useEffect(() => {\n        axios.get('http://ip-api.com/json/?fields=61439').then((res) => setIPAddress(res.data.query)).catch((err) => console.log(err));\n    }, []);\n\n    useEffect(() => {\n        const firestoreInsert = async () => {\n            const checkRef = doc(db, 'polls', `${params.id}`)\n            const checkSnap = await getDoc(checkRef);\n            if(checkSnap.exists()) {\n                onSnapshot(collection(db, \"polls\"), (snapshot) => {\n                    snapshot.docs.map(doc => {\n                        console.log(doc.exists());\n                        if(doc.id === params.id) {\n                            const data = doc.data();\n                            const IPAdresses = data.IPAddresses;\n                            console.log(IPAdresses);\n                            if(IPAdresses.includes(ipAddress)) {\n                                setVotingStatus(true);\n                            } else console.log('Hasnt voted!');\n                            setTitle(data.title);\n                            setOptions(data.options);\n                            setPollingID(doc.id);\n                            setOptionOneCount(data.optionACount);\n                            setOptionTwoCount(data.optionBCount);\n                            setOptionThreeCount(data.optionCCount);\n                            setOptionFourCount(data.optionDCount);\n                        }\n                    });\n                });\n            } else setDocStatus(false);\n        };\n        firestoreInsert();\n    }, []);\n\n    return (\n        <Suspense fallback={<div></div>}>\n            <div>\n                {docStatus ? (\n                                <div>\n                                    {!votingStatus ? (\n                                    <div>\n                                        <h1>{title}</h1>\n                                        <button onClick={onOption1}>{options[0]}</button><br></br>\n                                        <button onClick={onOption2}>{options[1]}</button><br></br>\n                                        <button onClick={onOption3}>{options[2]}</button><br></br>\n                                        <button onClick={onOption4}>{options[3]}</button><br></br>\n                                    </div>\n                                    ) : (\n                                        <NavLink to={`/poll/results/${pollingID}`} children={<PollResults />}/>\n                                    )}\n                                </div>\n                          ) : (       \n                        <div>\n                            <h1>This document does not exist!</h1>\n                        </div>\n                    )}\n                </div>\n        </Suspense>\n    )\n}"]},"metadata":{},"sourceType":"module"}