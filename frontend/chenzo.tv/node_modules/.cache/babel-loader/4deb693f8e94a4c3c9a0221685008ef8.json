{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elias\\\\Documents\\\\Programming\\\\Chenzo.tv\\\\frontend\\\\chenzo.tv\\\\src\\\\components\\\\Poll\\\\PollResults.tsx\",\n    _s = $RefreshSig$();\n\nimport { collection, onSnapshot } from \"firebase/firestore\";\nimport { PieChart, Pie } from \"recharts\";\nimport db from \"../../firebase/firestore\";\nimport React, { useEffect, useState } from \"react\";\nimport './PollResults.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PollResults(_ref) {\n  _s();\n\n  let {\n    pollID\n  } = _ref;\n  let [title, setTitle] = useState('');\n  let [options, setOptions] = useState([]);\n  let [optionOneCount, setOptionOneCount] = useState(0);\n  let [optionTwoCount, setOptionTwoCount] = useState(0);\n  let [optionThreeCount, setOptionThreeCount] = useState(0);\n  let [optionFourCount, setOptionFourCount] = useState(0);\n  let [results, setResults] = useState([0]);\n  let [isLoading, setLoadingStatus] = useState(true);\n  useEffect(() => {\n    console.log(`${results[0]}% voted for ${options[0]}`);\n    console.log(`${results[1]}% voted for ${options[1]}`);\n    console.log(`${results[2]}% voted for ${options[2]}`);\n    console.log(`${results[3]}% voted for ${options[3]}`);\n    onSnapshot(collection(db, 'polls'), snapshot => {\n      snapshot.docs.map(doc => {\n        if (doc.id === pollID) {\n          const data = doc.data();\n          setTitle(data.title);\n          setOptions(data.options);\n          setOptionOneCount(data.optionACount);\n          setOptionTwoCount(data.optionBCount);\n          setOptionThreeCount(data.optionCCount);\n          setOptionFourCount(data.optionDCount);\n          let totalVotes = data.optionACount + data.optionBCount + data.optionCCount + data.optionDCount;\n          let votePercentageACalc = data.optionACount / totalVotes * 100;\n          let votePercentageBCalc = data.optionBCount / totalVotes * 100;\n          let votePercentageCCalc = data.optionCCount / totalVotes * 100;\n          let votePercentageDCalc = data.optionDCount / totalVotes * 100;\n          const results = [votePercentageACalc, votePercentageBCalc, votePercentageCCalc, votePercentageDCalc];\n          setResults(results);\n          setTimeout(() => {\n            setLoadingStatus(false);\n          }, 1200);\n        }\n      });\n    });\n  }, []);\n  const data = [15, 20, 40, 30];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(PieChart, {\n        width: 500,\n        height: 250,\n        children: /*#__PURE__*/_jsxDEV(Pie, {\n          data: data,\n          dataKey: \"value\",\n          nameKey: \"name\",\n          cx: \"50%\",\n          cy: \"50%\",\n          innerRadius: 60,\n          outerRadius: 80,\n          fill: \"#82ca9d\",\n          label: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PollResults, \"S9ZcBrJnfW0Hi8Kbh/FnTRJWVGk=\");\n\n_c = PollResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollResults\");","map":{"version":3,"sources":["C:/Users/Elias/Documents/Programming/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/PollResults.tsx"],"names":["collection","onSnapshot","PieChart","Pie","db","React","useEffect","useState","PollResults","pollID","title","setTitle","options","setOptions","optionOneCount","setOptionOneCount","optionTwoCount","setOptionTwoCount","optionThreeCount","setOptionThreeCount","optionFourCount","setOptionFourCount","results","setResults","isLoading","setLoadingStatus","console","log","snapshot","docs","map","doc","id","data","optionACount","optionBCount","optionCCount","optionDCount","totalVotes","votePercentageACalc","votePercentageBCalc","votePercentageCCalc","votePercentageDCalc","setTimeout"],"mappings":"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","sourcesContent":["import { collection, onSnapshot } from \"firebase/firestore\";\r\nimport { PieChart, Pie } from \"recharts\";\r\nimport db from \"../../firebase/firestore\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport './PollResults.css';\r\n\r\n\r\n\r\nexport default function PollResults({ pollID }) {\r\n\r\n    let [title, setTitle] = useState('');\r\n    let [options, setOptions] = useState([]);\r\n    let [optionOneCount, setOptionOneCount] = useState(0);\r\n    let [optionTwoCount, setOptionTwoCount] = useState(0);\r\n    let [optionThreeCount, setOptionThreeCount] = useState(0);\r\n    let [optionFourCount, setOptionFourCount] = useState(0);\r\n    let [results, setResults] = useState([0]);\r\n    let [isLoading, setLoadingStatus] = useState(true);\r\n\r\n    useEffect(() => {\r\n        console.log(`${results[0]}% voted for ${options[0]}`);\r\n        console.log(`${results[1]}% voted for ${options[1]}`);\r\n        console.log(`${results[2]}% voted for ${options[2]}`);\r\n        console.log(`${results[3]}% voted for ${options[3]}`);\r\n        onSnapshot(collection(db, 'polls'), (snapshot) => {\r\n            snapshot.docs.map((doc) => {\r\n                if(doc.id === pollID) {\r\n                    const data = doc.data();\r\n                    setTitle(data.title);\r\n                    setOptions(data.options);\r\n                    setOptionOneCount(data.optionACount);\r\n                    setOptionTwoCount(data.optionBCount);\r\n                    setOptionThreeCount(data.optionCCount);\r\n                    setOptionFourCount(data.optionDCount);\r\n                    let totalVotes = data.optionACount + data.optionBCount + data.optionCCount + data.optionDCount;\r\n                    let votePercentageACalc = data.optionACount / totalVotes * 100;\r\n                    let votePercentageBCalc = data.optionBCount / totalVotes * 100;\r\n                    let votePercentageCCalc = data.optionCCount / totalVotes * 100;\r\n                    let votePercentageDCalc = data.optionDCount / totalVotes * 100;\r\n                    const results = [votePercentageACalc, votePercentageBCalc, votePercentageCCalc, votePercentageDCalc];\r\n                    setResults(results);\r\n                    setTimeout(() => { setLoadingStatus(false); }, 1200);\r\n                }\r\n            })\r\n        })\r\n    }, []);\r\n\r\n    const data = [15, 20, 40, 30]\r\n    \r\n    return (\r\n        <div>\r\n            {!isLoading ? (\r\n                <div>\r\n                    <h1>{title}</h1>\r\n                    <PieChart width={500} height={250}>\r\n                        <Pie data={data} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" innerRadius={60} outerRadius={80} fill=\"#82ca9d\" label />\r\n                    </PieChart>\r\n                </div>\r\n            ) : (\r\n                <h1>Loading!</h1>\r\n            )}\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}