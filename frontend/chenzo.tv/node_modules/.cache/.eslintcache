[{"/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/index.tsx":"1","/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/reportWebVitals.ts":"2","/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/App.tsx":"3","/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/Poll.tsx":"4","/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/CreatePoll.tsx":"5","/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/firebase/firestore.js":"6","/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/PollResults.tsx":"7"},{"size":593,"mtime":1646723807982,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1646723807983,"results":"10","hashOfConfig":"9"},{"size":530,"mtime":1646811953278,"results":"11","hashOfConfig":"9"},{"size":5547,"mtime":1647241264200,"results":"12","hashOfConfig":"9"},{"size":2252,"mtime":1647220108002,"results":"13","hashOfConfig":"9"},{"size":339,"mtime":1646723807982,"results":"14","hashOfConfig":"9"},{"size":4044,"mtime":1647764969031,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1tfogje",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"19"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/index.tsx",[],[],["44","45"],"/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/reportWebVitals.ts",[],[],"/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/App.tsx",["46"],[],"import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport CreatePoll from './components/Poll/CreatePoll';\nimport Poll from './components/Poll/Poll';\nimport PollResults from './components/Poll/PollResults';\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path='/poll/create' element={<CreatePoll />}/><Route path='/poll/:id' element={<Poll />}/><Route path='/poll/results/:id' element={<PollResults />}/>\n    </Routes>\n  );\n}\n\nexport default App;\n","/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/Poll.tsx",["47","48","49","50"],[],"import react, { Suspense, useEffect, useState, } from \"react\";\nimport axios from 'axios';\nimport { NavLink, useParams } from \"react-router-dom\";\nimport { collection, doc, getDoc, onSnapshot, arrayUnion, updateDoc } from \"firebase/firestore\";\nimport db from \"../../firebase/firestore\";\nimport PollResults from \"./PollResults\";\n\nexport default function Poll() {\n    let params = useParams();\n    let [ipAddress, setIPAddress] = useState('');\n    let [entryIPAddresses, setEntryIPAddresses] = useState(['']);\n    let [docStatus, setDocStatus] = useState(true);\n    let [title, setTitle] = useState('');\n    let [votingStatus, setVotingStatus] = useState(false);\n    let [pollingID, setPollingID] = useState('');\n    let [options, setOptions] = useState([]);\n    let [optionOneCount, setOptionOneCount] = useState(0);\n    let [optionTwoCount, setOptionTwoCount] = useState(0);\n    let [optionThreeCount, setOptionThreeCount] = useState(0);\n    let [optionFourCount, setOptionFourCount] = useState(0);\n\n    const onOption1 = async () => {\n        try {\n            let pollRef = doc(db, 'polls', pollingID);\n            await updateDoc(pollRef, {\n                optionACount: optionOneCount + 1,\n                IPAddresses: arrayUnion(ipAddress)\n            })\n            setVotingStatus(true);\n            console.log(`Successfully updated ${pollRef.id}`);\n        } catch(e) { console.log(e); }\n    };\n\n    \n    const onOption2 = async () => {\n        try {\n            let pollRef = doc(db, 'polls', pollingID);\n            await updateDoc(pollRef, {\n                optionBCount: optionTwoCount + 1,\n                IPAddresses: arrayUnion(ipAddress)\n            })\n            setVotingStatus(true);\n            console.log(`Successfully updated ${pollRef.id}`);\n        } catch(e) { console.log(e); }\n    };\n\n    \n    const onOption3 = async () => {\n        try {\n            let pollRef = doc(db, 'polls', pollingID);\n            await updateDoc(pollRef, {\n                optionCCount: optionThreeCount + 1,\n                IPAddresses: arrayUnion(ipAddress)\n            })\n            setVotingStatus(true);\n            console.log(`Successfully updated ${pollRef.id}`);\n        } catch(e) { console.log(e); }\n    };\n\n    \n    const onOption4 = async () => {\n        try {\n            let pollRef = doc(db, 'polls', pollingID);\n            await updateDoc(pollRef, {\n                optionDCount: optionFourCount + 1,\n                IPAddresses: arrayUnion(ipAddress)\n            })\n            setVotingStatus(true);\n            console.log(`Successfully updated ${pollRef.id}`);\n        } catch(e) { console.log(e); }\n    };\n\n    // get user IP Address useEffect Hook\n    useEffect(() => {\n        axios.get('http://ip-api.com/json/?fields=61439').then((res) => setIPAddress(res.data.query)).catch((err) => console.log(err));\n    }, []);\n\n    useEffect(() => {\n        const firestoreInsert = async () => {\n            const checkRef = doc(db, 'polls', `${params.id}`)\n            const checkSnap = await getDoc(checkRef);\n            if(checkSnap.exists()) {\n                onSnapshot(collection(db, \"polls\"), (snapshot) => {\n                    snapshot.docs.map(doc => {\n                        if(doc.id === params.id) {\n                            const data = doc.data();\n                            setEntryIPAddresses([data.IPAddresses]);\n                            axios.get('http://ip-api.com/json/?fields=61439').then((res) => checkDuplicateEntries(data.IPAddresses, res.data.query)).catch((err) => console.log(err));\n                            setTitle(data.title);\n                            setOptions(data.options);\n                            setPollingID(doc.id);\n                            setOptionOneCount(data.optionACount);\n                            setOptionTwoCount(data.optionBCount);\n                            setOptionThreeCount(data.optionCCount);\n                            setOptionFourCount(data.optionDCount);\n                        }\n                    });\n                });\n            } else setDocStatus(false);\n        };\n        firestoreInsert();\n    }, []);\n\n    const checkDuplicateEntries = (entryIPAddresses : string[], clientIPAddress : string) => {\n        entryIPAddresses.forEach(ip => {\n            if(ip === clientIPAddress) setVotingStatus(true);\n        });\n    }\n\n    return (\n        <Suspense fallback={<div></div>}>\n            <div>\n                {docStatus ? (\n                                <div>\n                                    {!votingStatus ? (\n                                    <div>\n                                        <h1>{title}</h1>\n                                        <button onClick={onOption1}>{options[0]}</button><br></br>\n                                        <button onClick={onOption2}>{options[1]}</button><br></br>\n                                        <button onClick={onOption3}>{options[2]}</button><br></br>\n                                        <button onClick={onOption4}>{options[3]}</button><br></br>\n                                    </div>\n                                    ) : (\n                                        <NavLink to={`/poll/results/${pollingID}`} children={<PollResults />}/>\n                                    )}\n                                </div>\n                          ) : (       \n                        <div>\n                            <h1>This document does not exist!</h1>\n                        </div>\n                    )}\n                </div>\n        </Suspense>\n    )\n}","/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/CreatePoll.tsx",["51","52","53","54"],[],"import React, { ChangeEvent, useState } from \"react\";\nimport { collection, addDoc, setDoc, doc } from \"firebase/firestore\";\nimport db from \"../../firebase/firestore\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport Poll from \"./Poll\";\n\n\nexport default function CreatePoll() {\n\n    let [pollCreated, isPollCreated] = useState(false);\n    let [pollID, setPollID] = useState('');\n\n    const onPollCreation = async (e : any) => {\n        e.preventDefault();\n        try {\n            let options = [\n                e.target[1].value,\n                e.target[2].value,\n                e.target[3].value,\n                e.target[4].value,\n            ]\n\n            const pollRef = await addDoc(collection(db, 'polls'), {\n                title: e.target[0].value,\n                options: options,\n                optionACount: 0,\n                optionBCount: 0,\n                optionCCount: 0,\n                optionDCount: 0,\n                IPAddresses: ''\n            });\n            isPollCreated(true);\n            setPollID(pollRef.id);\n            console.log(`Poll ID: ${pollRef.id} has been created!`)\n        } catch (e) { console.log(\"Error adding document: \", e) }\n    };\n\n\n    return (\n        <div>\n            {pollCreated ? (\n                <NavLink to={`/poll/${pollID}`} children={<Poll/>}/>\n            ) : (\n            <div>\n                <form onSubmit={onPollCreation}>\n                    <label id={\"title\"}>Title</label><br></br>\n                    <input type=\"text\" name=\"title\"></input><br></br>\n                    <label id={\"option1\"}>Option 1</label><br></br>\n                    <input type=\"text\" name=\"option1\"></input><br></br>\n                    <label id={\"option2\"}>Option 2</label><br></br>\n                    <input type=\"text\" name=\"option2\"></input><br></br>\n                    <label id={\"option3\"}>Option 3</label><br></br>\n                    <input type=\"text\" name=\"option3\"></input><br></br>\n                    <label id={\"option4\"}>Option 4</label><br></br>\n                    <input type=\"text\" name=\"option4\"></input><br></br>\n                    <input type=\"submit\" value=\"Submit\"></input><br></br>\n                </form>\n            </div>\n            )}\n        </div>\n    )\n}","/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/firebase/firestore.js",["55"],[],"import { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\n\n// Initialize Firebase\nconst firebaseApp = initializeApp({\n  apiKey: 'AIzaSyCkiL_ZyjBEiY6NfD7ihk20nBP-PePkjXU',\n  authDomain: 'chenzotv-e811a.firebaseapp.com',\n  projectId: 'chenzotv-e811a'\n});\n\nconst db = getFirestore();\n\nexport default db;",["56","57"],"/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/PollResults.tsx",["58","59","60","61","62"],[],"import { collection, onSnapshot, doc, getDoc } from \"firebase/firestore\";\nimport { useParams } from \"react-router-dom\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Pie } from 'react-chartjs-2';\nimport db from \"../../firebase/firestore\";\nimport React, { useEffect, useState } from \"react\";\nimport './PollResults.css';\nChartJS.register(ArcElement, Tooltip, Legend);\n\n\nexport default function PollResults() {\n\n    let params = useParams();\n    let [title, setTitle] = useState('');\n    let [docExists, setDocExists] = useState(true);\n    let [firstOptionValue, setFirstOptionValue] = useState(0);\n    let [secondOptionValue, setSecondOptionValue] = useState(0);\n    let [thirdOptionValue, setThirdOptionValue] = useState(0);\n    let [fourthOptionValue, setFourthOptionValue] = useState(0);\n    let [options, setOptions] = useState(['']);\n    let [results, setResults] = useState([0, 0, 0, 0]);\n    let [isLoading, setLoadingStatus] = useState(true);\n\n    useEffect(() => {\n        const firebaseInsert = async () => {\n            const checkRef = doc(db, 'polls', `${params.id}`)\n            const checkSnap = await getDoc(checkRef);\n            if(checkSnap.exists()) {\n                onSnapshot(collection(db, 'polls'), (snapshot) => {\n                    snapshot.docs.map((doc) => {\n                        if(doc.id === checkSnap.id) {\n                            const data = doc.data();\n                            setFirstOptionValue(data.optionACount);\n                            setSecondOptionValue(data.optionBCount);\n                            setThirdOptionValue(data.optionCCount);\n                            setFourthOptionValue(data.optionDCount);\n                            setTitle(data.title);\n                            setOptions(data.options);\n                            setResults([data.optionACount, data.optionBCount, data.optionCCount, data.optionDCount]);\n                            setTimeout(() => { setLoadingStatus(false); }, 1200);\n                        }\n                    });\n                });\n            } else setDocExists(false);\n        };\n        firebaseInsert();\n    }, [firstOptionValue || secondOptionValue || thirdOptionValue || fourthOptionValue]);\n\n\n    \n    return (\n        <div>\n            <div>\n                {docExists ? (\n                    <div className=\"\">\n                        <h1>{title}</h1>\n                        <Pie data={{\n                        labels: [...options],\n                        datasets: [\n                            {\n                                label: `# of Votes on ${title}`,\n                                data: [firstOptionValue, secondOptionValue, thirdOptionValue, fourthOptionValue],\n                                backgroundColor: [\n                                    'rgba(255, 99, 132, 0.2)',\n                                    'rgba(54, 162, 235, 0.2)',\n                                    'rgba(255, 206, 86, 0.2)',\n                                    'rgba(75, 192, 192, 0.2)',\n                                    'rgba(153, 102, 255, 0.2)',\n                                    'rgba(255, 159, 64, 0.2)',\n                                  ],\n                                  borderColor: [\n                                    'rgba(255, 99, 132, 1)',\n                                    'rgba(54, 162, 235, 1)',\n                                    'rgba(255, 206, 86, 1)',\n                                    'rgba(75, 192, 192, 1)',\n                                    'rgba(153, 102, 255, 1)',\n                                    'rgba(255, 159, 64, 1)',\n                                  ],\n                                  borderWidth: 1,\n                            },\n                        ]\n                    }} height={'200'} width={'200'} />\n                    </div>\n                ) : (\n                    <div>\n                        <h1>This Document does not exist!</h1>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":12},{"ruleId":"67","severity":1,"message":"71","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":13},{"ruleId":"67","severity":1,"message":"72","line":11,"column":10,"nodeType":"69","messageId":"70","endLine":11,"endColumn":26},{"ruleId":"73","severity":1,"message":"74","line":84,"column":43,"nodeType":"75","messageId":"76","endLine":84,"endColumn":45},{"ruleId":"77","severity":1,"message":"78","line":102,"column":8,"nodeType":"79","endLine":102,"endColumn":10,"suggestions":"80"},{"ruleId":"67","severity":1,"message":"81","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":28},{"ruleId":"67","severity":1,"message":"82","line":2,"column":30,"nodeType":"69","messageId":"70","endLine":2,"endColumn":36},{"ruleId":"67","severity":1,"message":"83","line":2,"column":38,"nodeType":"69","messageId":"70","endLine":2,"endColumn":41},{"ruleId":"67","severity":1,"message":"84","line":4,"column":10,"nodeType":"69","messageId":"70","endLine":4,"endColumn":14},{"ruleId":"85","severity":1,"message":"86","line":5,"column":7,"nodeType":"69","messageId":"70","endLine":5,"endColumn":18},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"87","line":21,"column":10,"nodeType":"69","messageId":"70","endLine":21,"endColumn":17},{"ruleId":"67","severity":1,"message":"88","line":22,"column":10,"nodeType":"69","messageId":"70","endLine":22,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":30,"column":45,"nodeType":"75","messageId":"76","endLine":30,"endColumn":47},{"ruleId":"77","severity":1,"message":"78","line":47,"column":8,"nodeType":"79","endLine":47,"endColumn":88,"suggestions":"89"},{"ruleId":"77","severity":1,"message":"90","line":47,"column":9,"nodeType":"91","endLine":47,"endColumn":87},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'react' is defined but never used.","'entryIPAddresses' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["94"],"'ChangeEvent' is defined but never used.","'setDoc' is defined but never used.","'doc' is defined but never used.","'Link' is defined but never used.","no-unused-vars","'firebaseApp' is assigned a value but never used.","'results' is assigned a value but never used.","'isLoading' is assigned a value but never used.",["95"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","LogicalExpression","no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"96","fix":"98"},"Update the dependencies array to be: [params.id]",{"range":"99","text":"100"},{"range":"101","text":"100"},[4117,4119],"[params.id]",[2163,2243]]