{"ast":null,"code":"var _jsxFileName = \"/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/PollResults.tsx\",\n    _s = $RefreshSig$();\n\nimport { collection, onSnapshot } from \"firebase/firestore\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Pie } from 'react-chartjs-2';\nimport db from \"../../firebase/firestore\";\nimport React, { useEffect, useState } from \"react\";\nimport './PollResults.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\nexport default function PollResults(_ref) {\n  _s();\n\n  let {\n    pollID\n  } = _ref;\n  let [title, setTitle] = useState('');\n  let [votePercentageACalc, setVotePercentageACalc] = useState(0);\n  let [votePercentageBCalc, setVotePercentageBCalc] = useState(0);\n  let [votePercentageCCalc, setVotePercentageCCalc] = useState(0);\n  let [votePercentageDCalc, setVotePercentageDCalc] = useState(0);\n  let [options, setOptions] = useState(['']);\n  let [results, setResults] = useState([0, 0, 0, 0]);\n  let [isLoading, setLoadingStatus] = useState(true);\n  const values = [10, 20, 30, 40];\n  useEffect(() => {\n    onSnapshot(collection(db, 'polls'), snapshot => {\n      snapshot.docs.map(doc => {\n        if (doc.id === pollID) {\n          const data = doc.data();\n          let totalVotes = data.optionACount + data.optionBCount + data.optionCCount + data.optionDCount;\n          setVotePercentageACalc(Math.round(data.optionACount / totalVotes * 100));\n          setVotePercentageBCalc(Math.round(data.optionBCount / totalVotes * 100));\n          setVotePercentageCCalc(Math.round(data.optionCCount / totalVotes * 100));\n          setVotePercentageDCalc(Math.round(data.optionDCount / totalVotes * 100));\n          setTitle(data.title);\n          setOptions(data.options);\n          console.log(data.optionACount, data.optionBCount, data.optionCCount, data.optionDCount);\n          const pieData = {\n            labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n            datasets: [{\n              label: '# of Votes',\n              data: [1, 24, 44, 54],\n              backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n              borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n              borderWidth: 1\n            }]\n          };\n          setResults([data.optionACount, data.optionBCount, data.optionCCount, data.optionDCount]);\n          setTimeout(() => {\n            setLoadingStatus(false);\n          }, 1200);\n        }\n      });\n    });\n  }, [results]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Pie, {\n        data: {\n          labels: ['Red', 'Blue', 'Green', 'Purple'],\n          datasets: [{\n            label: `# of Votes on ${title}`,\n            data: values,\n            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n            borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n            borderWidth: 1\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PollResults, \"Uca9Tz3CCjDgWOAul+I+/abK2no=\");\n\n_c = PollResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollResults\");","map":{"version":3,"sources":["/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/PollResults.tsx"],"names":["collection","onSnapshot","Chart","ChartJS","ArcElement","Tooltip","Legend","Pie","db","React","useEffect","useState","register","PollResults","pollID","title","setTitle","votePercentageACalc","setVotePercentageACalc","votePercentageBCalc","setVotePercentageBCalc","votePercentageCCalc","setVotePercentageCCalc","votePercentageDCalc","setVotePercentageDCalc","options","setOptions","results","setResults","isLoading","setLoadingStatus","values","snapshot","docs","map","doc","id","data","totalVotes","optionACount","optionBCount","optionCCount","optionDCount","Math","round","console","log","pieData","labels","datasets","label","backgroundColor","borderColor","borderWidth","setTimeout"],"mappings":"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","sourcesContent":["import { collection, onSnapshot } from \"firebase/firestore\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Pie } from 'react-chartjs-2';\nimport db from \"../../firebase/firestore\";\nimport React, { useEffect, useState } from \"react\";\nimport './PollResults.css';\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\n\nexport default function PollResults({ pollID }) {\n\n    let [title, setTitle] = useState('');\n    let [votePercentageACalc, setVotePercentageACalc] = useState(0);\n    let [votePercentageBCalc, setVotePercentageBCalc] = useState(0);\n    let [votePercentageCCalc, setVotePercentageCCalc] = useState(0);\n    let [votePercentageDCalc, setVotePercentageDCalc] = useState(0);\n    let [options, setOptions] = useState(['']);\n    let [results, setResults] = useState([0, 0, 0, 0]);\n    let [isLoading, setLoadingStatus] = useState(true);\n    const values = [10, 20, 30, 40]\n\n    useEffect(() => {\n        onSnapshot(collection(db, 'polls'), (snapshot) => {\n            snapshot.docs.map((doc) => {\n                if(doc.id === pollID) {\n                    const data = doc.data();\n                    let totalVotes = data.optionACount + data.optionBCount + data.optionCCount + data.optionDCount;\n                    setVotePercentageACalc(Math.round(data.optionACount / totalVotes * 100));\n                    setVotePercentageBCalc(Math.round(data.optionBCount / totalVotes * 100));\n                    setVotePercentageCCalc(Math.round(data.optionCCount / totalVotes * 100));\n                    setVotePercentageDCalc(Math.round(data.optionDCount / totalVotes * 100));\n                    setTitle(data.title);\n                    setOptions(data.options);\n                    console.log(data.optionACount, data.optionBCount, data.optionCCount, data.optionDCount)\n                    const pieData = {\n                        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n                        datasets: [\n                          {\n                            label: '# of Votes',\n                            data: [1, 24, 44, 54],\n                            backgroundColor: [\n                              'rgba(255, 99, 132, 0.2)',\n                              'rgba(54, 162, 235, 0.2)',\n                              'rgba(255, 206, 86, 0.2)',\n                              'rgba(75, 192, 192, 0.2)',\n                              'rgba(153, 102, 255, 0.2)',\n                              'rgba(255, 159, 64, 0.2)',\n                            ],\n                            borderColor: [\n                              'rgba(255, 99, 132, 1)',\n                              'rgba(54, 162, 235, 1)',\n                              'rgba(255, 206, 86, 1)',\n                              'rgba(75, 192, 192, 1)',\n                              'rgba(153, 102, 255, 1)',\n                              'rgba(255, 159, 64, 1)',\n                            ],\n                            borderWidth: 1,\n                          },\n                        ],\n                      };\n                      setResults([data.optionACount, data.optionBCount, data.optionCCount, data.optionDCount]);\n                    setTimeout(() => { setLoadingStatus(false); }, 1200);\n                }\n            })\n        })\n    }, [results]);\n\n\n    \n    return (\n        <div>\n            {!isLoading ? (\n                <div>\n                    <h1>{title}</h1>\n                    <Pie data={{\n                        labels: ['Red', 'Blue', 'Green', 'Purple'],\n                        datasets: [\n                            {\n                                label: `# of Votes on ${title}`,\n                                data: values,\n                                backgroundColor: [\n                                    'rgba(255, 99, 132, 0.2)',\n                                    'rgba(54, 162, 235, 0.2)',\n                                    'rgba(255, 206, 86, 0.2)',\n                                    'rgba(75, 192, 192, 0.2)',\n                                    'rgba(153, 102, 255, 0.2)',\n                                    'rgba(255, 159, 64, 0.2)',\n                                  ],\n                                  borderColor: [\n                                    'rgba(255, 99, 132, 1)',\n                                    'rgba(54, 162, 235, 1)',\n                                    'rgba(255, 206, 86, 1)',\n                                    'rgba(75, 192, 192, 1)',\n                                    'rgba(153, 102, 255, 1)',\n                                    'rgba(255, 159, 64, 1)',\n                                  ],\n                                  borderWidth: 1,\n                            },\n                        ]\n                    }}/>\n                </div>\n            ) : (\n                <h1>Loading!</h1>\n            )}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}