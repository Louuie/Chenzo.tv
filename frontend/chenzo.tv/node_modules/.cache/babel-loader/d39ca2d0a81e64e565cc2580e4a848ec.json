{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elias\\\\Documents\\\\Programming\\\\Chenzo.tv\\\\frontend\\\\chenzo.tv\\\\src\\\\components\\\\Poll\\\\PollResults.tsx\",\n    _s = $RefreshSig$();\n\nimport { collection, onSnapshot } from \"firebase/firestore\";\nimport { PieChart, Pie, Cell } from \"recharts\";\nimport db from \"../../firebase/firestore\";\nimport React, { useEffect, useState } from \"react\";\nimport './PollResults.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"];\nconst data = [{\n  name: \"Group A\",\n  value: 400\n}, {\n  name: \"Group B\",\n  value: 300\n}, {\n  name: \"Group C\",\n  value: 300\n}, {\n  name: \"Group D\",\n  value: 200\n}];\nconst RADIAN = Math.PI / 180;\n\nconst renderCustomizedLabel = _ref => {\n  let {\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n    index\n  } = _ref;\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  return /*#__PURE__*/_jsxDEV(\"text\", {\n    x: x,\n    y: y,\n    fill: \"white\",\n    textAnchor: x > cx ? \"start\" : \"end\",\n    dominantBaseline: \"central\",\n    children: `${(percent * 100).toFixed(0)}%`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\nexport default function PollResults(_ref2) {\n  _s();\n\n  let {\n    pollID\n  } = _ref2;\n  let [title, setTitle] = useState('');\n  let [options, setOptions] = useState(['']);\n  let [results, setResults] = useState([{}]);\n  let [isLoading, setLoadingStatus] = useState(true);\n  useEffect(() => {\n    onSnapshot(collection(db, 'polls'), snapshot => {\n      snapshot.docs.map(doc => {\n        if (doc.id === pollID) {\n          const data = doc.data();\n          let totalVotes = data.optionACount + data.optionBCount + data.optionCCount + data.optionDCount;\n          let votePercentageACalc = data.optionACount / totalVotes * 100;\n          let votePercentageBCalc = data.optionBCount / totalVotes * 100;\n          let votePercentageCCalc = data.optionCCount / totalVotes * 100;\n          let votePercentageDCalc = data.optionDCount / totalVotes * 100;\n          setTitle(data.title);\n          setOptions(data.options);\n          const calcData = [{\n            name: `${options[0]}`,\n            value: Math.round(votePercentageACalc)\n          }, {\n            name: `${options[1]}`,\n            value: Math.round(votePercentageBCalc)\n          }, {\n            name: `${options[2]}`,\n            value: Math.round(votePercentageCCalc)\n          }, {\n            name: `${options[3]}`,\n            value: Math.round(votePercentageDCalc)\n          }];\n          const results = [{\n            name: data.options[0],\n            value: Math.round(votePercentageACalc)\n          }, {\n            name: data.options[1],\n            value: Math.round(votePercentageBCalc)\n          }, {\n            name: data.options[2],\n            value: Math.round(votePercentageCCalc)\n          }, {\n            name: data.options[3],\n            value: Math.round(votePercentageDCalc)\n          }];\n          setResults(calcData1);\n          setTimeout(() => {\n            setLoadingStatus(false);\n          }, 1200);\n        }\n      });\n    });\n  }, [results]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(PieChart, {\n        width: 400,\n        height: 400,\n        children: /*#__PURE__*/_jsxDEV(Pie, {\n          data: results,\n          cx: 200,\n          cy: 200,\n          labelLine: false,\n          label: renderCustomizedLabel,\n          outerRadius: 80,\n          fill: \"#8884d8\",\n          dataKey: \"value\",\n          children: results.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n            fill: COLORS[index % COLORS.length]\n          }, `cell-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PollResults, \"akKyB+72iWvnwjCd9OTc3f4Fmr0=\");\n\n_c = PollResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollResults\");","map":{"version":3,"sources":["C:/Users/Elias/Documents/Programming/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/PollResults.tsx"],"names":["collection","onSnapshot","PieChart","Pie","Cell","db","React","useEffect","useState","COLORS","data","name","value","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","index","radius","x","cos","y","sin","toFixed","PollResults","pollID","title","setTitle","options","setOptions","results","setResults","isLoading","setLoadingStatus","snapshot","docs","map","doc","id","totalVotes","optionACount","optionBCount","optionCCount","optionDCount","votePercentageACalc","votePercentageBCalc","votePercentageCCalc","votePercentageDCalc","calcData","round","calcData1","setTimeout","entry","length"],"mappings":"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","sourcesContent":["import { collection, onSnapshot } from \"firebase/firestore\";\r\nimport { PieChart, Pie, Cell, ResponsiveContainer } from \"recharts\";\r\nimport db from \"../../firebase/firestore\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport './PollResults.css';\r\n\r\n\r\nconst COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"];\r\n\r\nconst data = [\r\n    { name: \"Group A\", value: 400 },\r\n    { name: \"Group B\", value: 300 },\r\n    { name: \"Group C\", value: 300 },\r\n    { name: \"Group D\", value: 200 }\r\n  ];\r\n\r\nconst RADIAN = Math.PI / 180;\r\nconst renderCustomizedLabel = ({\r\n  cx,\r\n  cy,\r\n  midAngle,\r\n  innerRadius,\r\n  outerRadius,\r\n  percent,\r\n  index\r\n}: any) => {\r\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n  return (\r\n    <text\r\n      x={x}\r\n      y={y}\r\n      fill=\"white\"\r\n      textAnchor={x > cx ? \"start\" : \"end\"}\r\n      dominantBaseline=\"central\"\r\n    >\r\n      {`${(percent * 100).toFixed(0)}%`}\r\n    </text>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\nexport default function PollResults({ pollID }) {\r\n\r\n    let [title, setTitle] = useState('');\r\n    let [options, setOptions] = useState(['']);\r\n    let [results, setResults] = useState([{}]);\r\n    let [isLoading, setLoadingStatus] = useState(true);\r\n\r\n    useEffect(() => {\r\n        onSnapshot(collection(db, 'polls'), (snapshot) => {\r\n            snapshot.docs.map((doc) => {\r\n                if(doc.id === pollID) {\r\n                    const data = doc.data();\r\n                    let totalVotes = data.optionACount + data.optionBCount + data.optionCCount + data.optionDCount;\r\n                    let votePercentageACalc = data.optionACount / totalVotes * 100;\r\n                    let votePercentageBCalc = data.optionBCount / totalVotes * 100;\r\n                    let votePercentageCCalc = data.optionCCount / totalVotes * 100;\r\n                    let votePercentageDCalc = data.optionDCount / totalVotes * 100;\r\n                    setTitle(data.title);\r\n                    setOptions(data.options);\r\n                    const calcData = [\r\n                        {name: `${options[0]}`, value: Math.round(votePercentageACalc)},\r\n                        {name: `${options[1]}`, value: Math.round(votePercentageBCalc)},\r\n                        {name: `${options[2]}`, value: Math.round(votePercentageCCalc)},\r\n                        {name: `${options[3]}`, value: Math.round(votePercentageDCalc)},\r\n                    ];\r\n                    const results = [\r\n                        {\r\n                            name: data.options[0],\r\n                            value: Math.round(votePercentageACalc),\r\n                        },\r\n                        {\r\n                            name: data.options[1],\r\n                            value: Math.round(votePercentageBCalc),\r\n                        },\r\n                        {\r\n                            name: data.options[2],\r\n                            value: Math.round(votePercentageCCalc),\r\n                        },\r\n                        {\r\n                            name: data.options[3],\r\n                            value: Math.round(votePercentageDCalc),\r\n                        },\r\n                    ]\r\n                    setResults(calcData1);\r\n                    setTimeout(() => { setLoadingStatus(false); }, 1200);\r\n                }\r\n            })\r\n        })\r\n    }, [results]);\r\n\r\n\r\n    \r\n    return (\r\n        <div>\r\n            {!isLoading ? (\r\n                <div>\r\n                    <h1>{title}</h1>\r\n                    <PieChart width={400} height={400}>\r\n                        <Pie data={results} cx={200} cy={200} labelLine={false} label={renderCustomizedLabel}\r\n                            outerRadius={80} fill=\"#8884d8\" dataKey=\"value\">\r\n                            {results.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                            ))}\r\n                        </Pie>\r\n                    </PieChart>\r\n                </div>\r\n            ) : (\r\n                <h1>Loading!</h1>\r\n            )}\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}