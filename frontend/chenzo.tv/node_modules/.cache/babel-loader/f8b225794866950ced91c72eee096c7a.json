{"ast":null,"code":"var _jsxFileName = \"/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/PollResults.tsx\",\n    _s = $RefreshSig$();\n\nimport { collection, onSnapshot } from \"firebase/firestore\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Pie } from 'react-chartjs-2';\nimport db from \"../../firebase/firestore\";\nimport React, { useEffect, useState } from \"react\";\nimport './PollResults.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\nconst data = {\n  labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n  datasets: [{\n    label: '# of Votes',\n    data: [12, 19, 3, 5, 2, 3],\n    backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n    borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n    borderWidth: 1\n  }]\n};\nexport default function PollResults(_ref) {\n  _s();\n\n  let {\n    pollID\n  } = _ref;\n  let [title, setTitle] = useState('');\n  let [votePercentageACalc, setVotePercentageACalc] = useState(0);\n  let [votePercentageBCalc, setVotePercentageBCalc] = useState(0);\n  let [votePercentageCCalc, setVotePercentageCCalc] = useState(0);\n  let [votePercentageDCalc, setVotePercentageDCalc] = useState(0);\n  let [options, setOptions] = useState(['']);\n  let [results, setResults] = useState([{}]);\n  let [isLoading, setLoadingStatus] = useState(true);\n  useEffect(() => {\n    onSnapshot(collection(db, 'polls'), snapshot => {\n      snapshot.docs.map(doc => {\n        if (doc.id === pollID) {\n          const data = doc.data();\n          let totalVotes = data.optionACount + data.optionBCount + data.optionCCount + data.optionDCount;\n          setVotePercentageACalc(Math.round(data.optionACount / totalVotes * 100));\n          setVotePercentageBCalc(Math.round(data.optionBCount / totalVotes * 100));\n          setVotePercentageCCalc(Math.round(data.optionCCount / totalVotes * 100));\n          setVotePercentageDCalc(Math.round(data.optionDCount / totalVotes * 100));\n          setTitle(data.title);\n          setOptions(data.options);\n          const calcData = [{\n            title: `${options[0]}`,\n            value: Math.round(votePercentageACalc),\n            color: '#E38627'\n          }, {\n            title: `${options[1]}`,\n            value: Math.round(votePercentageBCalc),\n            color: '#C13C37'\n          }, {\n            title: `${options[2]}`,\n            value: Math.round(votePercentageCCalc),\n            color: '#6A2135'\n          }, {\n            title: `${options[3]}`,\n            value: Math.round(votePercentageDCalc),\n            color: '#873e23'\n          }];\n          setResults(calcData);\n          setTimeout(() => {\n            setLoadingStatus(false);\n          }, 1200);\n        }\n      });\n    });\n  }, [results]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Pie, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PollResults, \"PaQbZSKmuFJbA7x416LJ+9MLBiQ=\");\n\n_c = PollResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollResults\");","map":{"version":3,"sources":["/Users/elias/Desktop/Chenzo.tv/frontend/chenzo.tv/src/components/Poll/PollResults.tsx"],"names":["collection","onSnapshot","Chart","ChartJS","ArcElement","Tooltip","Legend","Pie","db","React","useEffect","useState","register","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","PollResults","pollID","title","setTitle","votePercentageACalc","setVotePercentageACalc","votePercentageBCalc","setVotePercentageBCalc","votePercentageCCalc","setVotePercentageCCalc","votePercentageDCalc","setVotePercentageDCalc","options","setOptions","results","setResults","isLoading","setLoadingStatus","snapshot","docs","map","doc","id","totalVotes","optionACount","optionBCount","optionCCount","optionDCount","Math","round","calcData","value","color","setTimeout"],"mappings":"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","sourcesContent":["import { collection, onSnapshot } from \"firebase/firestore\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Pie } from 'react-chartjs-2';\nimport db from \"../../firebase/firestore\";\nimport React, { useEffect, useState } from \"react\";\nimport './PollResults.css';\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nconst data = {\n    labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n    datasets: [\n      {\n        label: '# of Votes',\n        data: [12, 19, 3, 5, 2, 3],\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)',\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\nexport default function PollResults({ pollID }) {\n\n    let [title, setTitle] = useState('');\n    let [votePercentageACalc, setVotePercentageACalc] = useState(0);\n    let [votePercentageBCalc, setVotePercentageBCalc] = useState(0);\n    let [votePercentageCCalc, setVotePercentageCCalc] = useState(0);\n    let [votePercentageDCalc, setVotePercentageDCalc] = useState(0);\n    let [options, setOptions] = useState(['']);\n    let [results, setResults] = useState([{}]);\n    let [isLoading, setLoadingStatus] = useState(true);\n\n\n    useEffect(() => {\n        onSnapshot(collection(db, 'polls'), (snapshot) => {\n            snapshot.docs.map((doc) => {\n                if(doc.id === pollID) {\n                    const data = doc.data();\n                    let totalVotes = data.optionACount + data.optionBCount + data.optionCCount + data.optionDCount;\n                    setVotePercentageACalc(Math.round(data.optionACount / totalVotes * 100));\n                    setVotePercentageBCalc(Math.round(data.optionBCount / totalVotes * 100));\n                    setVotePercentageCCalc(Math.round(data.optionCCount / totalVotes * 100));\n                    setVotePercentageDCalc(Math.round(data.optionDCount / totalVotes * 100));\n                    setTitle(data.title);\n                    setOptions(data.options);\n                    const calcData = [\n                        {title: `${options[0]}`, value: Math.round(votePercentageACalc), color: '#E38627'},\n                        {title: `${options[1]}`, value: Math.round(votePercentageBCalc), color: '#C13C37'},\n                        {title: `${options[2]}`, value: Math.round(votePercentageCCalc), color: '#6A2135'},\n                        {title: `${options[3]}`, value: Math.round(votePercentageDCalc), color: '#873e23'},\n                    ];\n                    setResults(calcData);\n                    setTimeout(() => { setLoadingStatus(false); }, 1200);\n                }\n            })\n        })\n    }, [results]);\n\n\n    \n    return (\n        <div>\n            {!isLoading ? (\n                <div>\n                    <h1>{title}</h1>\n                    <Pie data={data}/>\n                </div>\n            ) : (\n                <h1>Loading!</h1>\n            )}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}